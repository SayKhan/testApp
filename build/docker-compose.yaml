services:
  testapp:
    image: saykhan/testapp
    build: .

  sonarqube:
    image: sonarqube:community
    depends_on:
      - db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:12
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  sonar-scanner-cli:
    environment:
      SONAR_HOST_URL: http://sonarqube:9000
      SONAR_SCANNER_OPTS: -Dsonar.projectKey=testapp
      SONAR_LOGIN: sqp_e47b387ec17767d6c0eb67ed427b2f54a0aafa30
    volumes:
      - ./:/usr/src
    image: sonarsource/sonar-scanner-cli
    depends_on:
      - sonarqube

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql:
  postgresql_data: